GTK 4.0 NOTES
====

gtk_widget_get_next_sibling - docs aren't clear on this -- idea is that you
can keep running it on the retval, and it will return NULL when no more
children. -- here's an example:

    /* queue draw functions for children */
    for (child = gtk_widget_get_first_child (widget);
            child != NULL;
            child = gtk_widget_get_next_sibling (child))
    {
        gtk_widget_snapshot_child (widget, child, snapshot);
    }

gtk_widget_set_name --> allows you to access the widget "name" via CSS using
the '#' - eg, if name is set to 'pathbarbox':

filechooser {
  .dialog-action-box {
    border-top: 1px solid $borders_color;
  }

  #pathbarbox { border-bottom: 1px solid $bg_color; }
}

gtk_widget now has a "can-focus" *in addition to* the "focusable" property
that was present in gtk3 (fixme: and 2?) - the docs are *really* not clear on
the difference. There should at least be a note that the one is not to be
confused with the other. In order to make a plain gtkwidget accept input focus
now, you *need* to do set_focusable


GtkDialog -- GtkBuilder
----

docs aren't clear on this.

you can do <child type="action"> but not "content".

to access content area say <child internal-child="content_area">

GtkSwitch - docs tell you not to connect to a certain signal to see if the
switch state has changed and to connect to the "notify::state" signal - but
this is not documented. I believe "notify::" is a generic prefix that lets you
be notified of property changes, and 'state' is the property we're looking to
be notified about.

gdk_content_provider_get_value ()
----

"Gets the contents of provider stored in value ."

should be "to be stored in value" or something. It does look *for* contents of
a provider stored *already in* a GValue - it fills up a GValue with the
requested GType, as initialized, if it exists.

eg:

  GValue value = G_VALUE_INIT;                                                 

  g_value_init (&value, GDK_TYPE_PAINTABLE);                                   

  if (!gdk_content_provider_get_value (content, &value, NULL))                 
    return;
